// Nats
def Z = λs λz (z)
def S = λn λs λz (s n)

// Church arithmetic
def zero = λs λz (z)
def succ = λn λs λz dup s0 s1 = s; (s0 (n s1 z))
def mul = λn λm λs (n (m s))

// Church consts
def c1 = λf λx (f x)
def c2 = λf λx (dup #c f0 f1 = f; (f0 (f1 x)))
def c3 = λf λx (dup #c f0 f1 = f; dup #c f2 f3 = f0; (f1 (f2 (f3 x))))
def c4 = λf λx (dup #c f0 f1 = f; dup #c f2 f3 = f0; dup #c f4 f5 = f1; (f2 (f3 (f4 (f5 x)))))
def p1 = c2          // 2
def p2 = (mul c2 p1) // 4
def p3 = (mul c2 p2) // 8
def p4 = (mul c2 p3) // 16
def p5 = (mul c2 p4) // 32
def p6 = (mul c2 p5) // 64
def p7 = (mul c2 p6) // 128
def p8 = (mul c2 p7) // 256

// Booleans
def true = λt λf t
def false = λt λf f
def not = λb ((b false) true)
def neg = λb λt λf (b f t)

// Lists
def cons = λhead λtail λcons λnil (cons head tail)
def nil = λcons λnil nil
def head = λlist (list λhλt(h) λx(x))
def tail = λlist (list λhλt(t) nil)

  

def map = @map λf λxs
  dup #f f0 f1 = f;
  (xs λhead λtail (cons (f0 head) (map f1 tail)) nil)

def ids = @k λcons λnil (cons λx(x) k)
def nums = @x (cons zero (map succ x))
def inf = @inf λs λz (s inf)

def type =
  dup A0 A1 = A
  dup A2 A3 = A0
  dup A4 A5 = A1
  dup A6 A7 = A2
  dup B0 B1 = B
  dup B2 B3 = B0
  dup B4 B5 = B1
  dup B6 B7 = B2
  ∀A -> ∀B ->
  & (&A4 -> B4) ->
  & (&B5 -> A5) -> 
  & A6 ->
  & B6 ->
  A7
// Good
def test5 =
  λT λP
  dup T0 T1 = T
  dup P0 P1 = P
  dup Q0 Q1 = Q
  < λp p
  : & (∀(P: T0) -> &P0 -> P1) ->
      (∀(Q: T1) -> &Q0 -> Q1)>
      
<<*: λx x>: λz z>